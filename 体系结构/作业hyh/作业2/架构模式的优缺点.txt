分层模式
容易开发 降低性能  易用性较低   可扩展性较低（每一层内部都是耦合的，代码调整或增加功能时很麻烦）  可测试性高 （每一层可以独立测试）部署比较麻烦，持续发布性较低 

总体灵活性: 低
发布易用性:低
可测试性: 高
性能:低
规模扩展性: 低

开发容易度: 高

优点

结构简单,容易理解和开发
不同技能的程序员可以分工,负责不同的层,天然适合大多数软件公司的组织架构
每一层都可以独立测试,其他层的接口通过模拟解决
缺点
一旦环境变化,需要代码调整或增加功能时,通常比较麻烦和费时
部署比较麻烦,即使只修改一个小地方,往往需要整个软件重新部署,不容易做持续发布
软件升级时,可能需要整个服务暂停
扩展性差.用户请求大量增加时,必须依次扩展每一层,由于每一层内部是耦合的,扩展会很困难
--------------------- 
管道-过滤
重用性高 支持软件重用。重要提供适合在两个过滤器之间传送的数据,任何两个过滤器都可被连接起来
可维护性高 系统维护和增强系统性能简单。新的过滤器可以添加到现有系统中来;旧的可以被改进的过滤器替换掉


黑板模式
优点：可用于非确定性问题求解，启发式解决过程，可维护性，可重用
不足：不能确保期望结果，效率低下，回退，不支持并行，共享空间的访问需要同步
优点： 
l 可更改性和可维护性 
l 可重用的知识源 
l 容错性和健壮性 
缺点： 
l 测试困难 
l 不能保证有好的解决方案 
l 难以建立好的控制策略 
l 抵效 
l 开发困难 
l 缺少并行机制 

--------------------- 

broker模式（分布式）
u 优点：
1. 服务的位置透明性。

2. 组件的可变性及扩展性。由于Server是注册到Broker上的，所以Server可以动态的增加、删除、改变。

3. Broker之间可交互。

4. 可重用性。

5. 由于组件的耦合度较小，调试和测试的工作也是可控的。



u 缺点:
1. 效率；增加了一层Broker的消息转发，效率有所降低。

2. 容错能力必须要特别考虑。

3. 调试和测试的工作加大。

——————————————————————————
MVC的优点：

1.耦合性低

视图层和业务层分离，这样就允许更改视图层代码而不用重新编译模型和控制器代码，同样，一个应用的业务流程或者业务规则的改变只需要改动MVC的模型层即可。因为模型与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。

2.重用性高

MVC模式允许使用各种不同样式的视图来访问同一个服务器端的代码，因为多个视图能共享一个模型，它包括任何WEB（HTTP）浏览器或者无线浏览器（wap），比如，用户可以通过电脑也可通过手机来订购某样产品，虽然订购的方式不一样，但处理订购产品的方式是一样的。由于模型返回的数据没有进行格式化，所以同样的构件能被不同的界面使用。

3.部署快，生命周期成本低

MVC使开发和维护用户接口的技术含量降低。使用MVC模式使开发时间得到相当大的缩减，它使程序员（Java开发人员）集中精力于业务逻辑，界面程序员（HTML和JSP开发人员）集中精力于表现形式上。

4.可维护性高

分离视图层和业务逻辑层也使得WEB应用更易于维护和修改。

MVC的缺点：

1.完全理解MVC比较复杂。

由于MVC模式提出的时间不长，加上同学们的实践经验不足，所以完全理解并掌握MVC不是一个很容易的过程。

2.调试困难。

因为模型和视图要严格的分离，这样也给调试应用程序带来了一定的困难，每个构件在使用之前都需要经过彻底的测试。

3.不适合小型，中等规模的应用程序

在一个中小型的应用程序中，强制性的使用MVC进行开发，往往会花费大量时间，并且不能体现MVC的优势，同时会使开发变得繁琐。

4.增加系统结构和实现的复杂性

对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。

5.视图与控制器间的过于紧密的连接并且降低了视图对模型数据的访问

视图与控制器是相互分离，但却是联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。

依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。



